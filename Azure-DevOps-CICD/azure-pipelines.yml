# Azure DevOps Pipeline - Complete CI/CD for Azure Functions
# Complete CI/CD Pipeline for Azure Functions deployment with infrastructure
# Version: 2.0 - Production Ready

trigger:
  branches:
    include:
      - main
      - develop
  paths:
    include:
      - azure_function/*
      - infrastructure/*
      - Dockerfile*
      - requirements.txt
      - scripts/*

pr:
  branches:
    include:
      - main
  paths:
    include:
      - azure_function/*
      - infrastructure/*

variables:
  # Common variables
  dockerRegistryServiceConnection: 'azure-container-registry-connection'
  imageRepository: 'traindata-function'
  containerRegistry: 'traindataacr1754421294.azurecr.io'
  dockerfilePath: '$(Build.SourcesDirectory)/Dockerfile.v2'
  tag: '$(Build.BuildId)'
  
  # Variables from Variable Groups (to be configured in Azure DevOps)
  # - azure-secrets: contains Azure secrets
  # - function-config: contains application configuration

stages:
- stage: PreValidation
  displayName: 'Pre-Build Validation'
  jobs:
  - job: CodeQuality
    displayName: 'Code Quality and Security Checks'
    pool:
      name: 'Default'
    
    steps:
    - checkout: self
      fetchDepth: 1
    
    - task: UsePythonVersion@0
      displayName: 'Use Python 3.12'
      inputs:
        versionSpec: '3.12'
    
    - script: |
        pip install pylint flake8 bandit safety
        echo "Running Python linting..."
        find ./azure_function -name "*.py" -exec pylint {} \; || true
        find ./azure_function -name "*.py" -exec flake8 {} \; || true
        echo "Running security checks..."
        bandit -r ./azure_function || true
        safety check || true
      displayName: 'Code Quality and Security Analysis'
    
    - script: |
        echo "Validating Docker configuration..."
        if [ -f "Dockerfile.v2" ]; then
          echo "Dockerfile.v2 found"
          docker run --rm -i hadolint/hadolint < Dockerfile.v2 || true
        else
          echo "Dockerfile.v2 not found"
          exit 1
        fi
      displayName: 'Dockerfile Validation'

- stage: Infrastructure
  displayName: 'Deploy Infrastructure'
  dependsOn: PreValidation
  condition: succeeded()
  jobs:
  - deployment: DeployInfrastructure
    displayName: 'Deploy Terraform Infrastructure'
    pool:
      vmImage: 'ubuntu-latest'
    
    variables:
    - group: azure-secrets
    - group: terraform-config
    
    environment: 'infrastructure'
    
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: self
          
          - task: TerraformInstaller@0
            displayName: 'Install Terraform'
            inputs:
              terraformVersion: 'latest'
          
          - task: AzureCLI@2
            displayName: 'Deploy Infrastructure with Terraform'
            inputs:
              azureSubscription: 'azure-service-connection'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                cd infrastructure
                
                # Initialize Terraform
                terraform init
                
                # Plan infrastructure changes
                terraform plan -var-file="dev.tfvars" -out=tfplan
                
                # Apply infrastructure changes
                terraform apply -auto-approve tfplan
                
                # Output important values
                terraform output
                
                echo "Infrastructure deployment completed"

- stage: Build
  displayName: 'Build and Push Container'
  dependsOn: Infrastructure
  condition: succeeded()
  jobs:
  - job: Build
    displayName: 'Build Docker Image'
    pool:
      vmImage: 'ubuntu-latest'
    
    variables:
    - group: azure-secrets
    - group: function-config
    
    steps:
    - checkout: self
      fetchDepth: 1
    
    - task: Docker@2
      displayName: 'Build Docker Image'
      inputs:
        command: 'build'
        repository: '$(imageRepository)'
        dockerfile: '$(dockerfilePath)'
        containerRegistry: '$(dockerRegistryServiceConnection)'
        tags: |
          $(tag)
          latest
    
    - task: Docker@2
      displayName: 'Push Docker Image'
      inputs:
        command: 'push'
        repository: '$(imageRepository)'
        containerRegistry: '$(dockerRegistryServiceConnection)'
        tags: |
          $(tag)
          latest
    
    - task: PublishBuildArtifacts@1
      displayName: 'Publish Build Info'
      inputs:
        pathToPublish: '$(Build.SourcesDirectory)/azure_function'
        artifactName: 'function-source'
    
    - task: PublishBuildArtifacts@1
      displayName: 'Publish Infrastructure Scripts'
      inputs:
        pathToPublish: '$(Build.SourcesDirectory)/scripts'
        artifactName: 'deployment-scripts'

- stage: Deploy
  displayName: 'Deploy to Azure'
  dependsOn: Build
  condition: succeeded()
  
  jobs:
  - deployment: DeployFunction
    displayName: 'Deploy Container to Azure Functions'
    pool:
      vmImage: 'ubuntu-latest'
    
    variables:
    - group: azure-secrets
    - group: function-config
    
    environment: 'production'
    
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: none
          
          - download: current
            artifact: 'function-source'
          
          - download: current
            artifact: 'deployment-scripts'
          
          - task: AzureFunctionAppContainer@1
            displayName: 'Deploy Container to Function App'
            inputs:
              azureSubscription: 'azure-service-connection'
              appName: '$(AZURE_FUNCTION_APP_NAME)'
              imageName: '$(containerRegistry)/$(imageRepository):$(tag)'
              appSettings: |
                -WEBSITES_ENABLE_APP_SERVICE_STORAGE false
                -DOCKER_REGISTRY_SERVER_URL https://$(containerRegistry)
                -DOCKER_REGISTRY_SERVER_USERNAME $(ACR_USERNAME)
                -DOCKER_REGISTRY_SERVER_PASSWORD $(ACR_PASSWORD)
                -AZURE_CLIENT_ID $(AZURE_CLIENT_ID)
                -AZURE_CLIENT_SECRET $(AZURE_CLIENT_SECRET)
                -AZURE_TENANT_ID $(AZURE_TENANT_ID)
                -SQL_CONNECTION_STRING $(SQL_CONNECTION_STRING)
                -APPLICATIONINSIGHTS_CONNECTION_STRING $(APPLICATIONINSIGHTS_CONNECTION_STRING)
                -AzureWebJobsStorage $(AZURE_WEB_JOBS_STORAGE)
                -FUNCTIONS_WORKER_RUNTIME python
                -FUNCTIONS_EXTENSION_VERSION ~4
          
          - task: AzureCLI@2
            displayName: 'Health Check - Test Function Endpoints'
            inputs:
              azureSubscription: 'azure-service-connection'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                echo "Testing Function App Health..."
                
                # Wait for deployment to complete
                sleep 30
                
                # Test health endpoint
                FUNCTION_URL="https://$(AZURE_FUNCTION_APP_NAME).azurewebsites.net"
                echo "Testing: $FUNCTION_URL/api/health"
                
                for i in {1..5}; do
                  echo "Health check attempt $i/5..."
                  if curl -f -s "$FUNCTION_URL/api/health"; then
                    echo "Health check passed!"
                    break
                  else
                    echo "Health check failed, retrying in 10s..."
                    sleep 10
                  fi
                done
                
                # Test API endpoints
                echo "Testing API endpoints..."
                curl -f -s "$FUNCTION_URL/api/stations" | head -200
                curl -f -s "$FUNCTION_URL/api/departures/Brussels-Central" | head -200
                
                echo "Deployment verification complete!"

- stage: Tests
  displayName: 'Post-Deployment Tests'
  dependsOn: Deploy
  condition: succeeded()
  
  jobs:
  - job: FunctionalTests
    displayName: 'Run Functional Tests'
    pool:
      vmImage: 'ubuntu-latest'
    
    variables:
    - group: function-config
    
    steps:
    - checkout: self
    
    - download: current
      artifact: 'deployment-scripts'
    
    - task: UsePythonVersion@0
      displayName: 'Use Python 3.12'
      inputs:
        versionSpec: '3.12'
    
    - script: |
        pip install requests pytest
      displayName: 'Install Test Dependencies'
    
    - task: AzureCLI@2
      displayName: 'Run Comprehensive API Tests'
      inputs:
        azureSubscription: 'azure-service-connection'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          # Make test script executable
          chmod +x scripts/test-irail-functions.sh
          
          # Set environment variables
          export FUNCTION_APP_NAME="$(AZURE_FUNCTION_APP_NAME)"
          export BASE_URL="https://$(AZURE_FUNCTION_APP_NAME).azurewebsites.net"
          
          # Run comprehensive tests
          echo "Running comprehensive API tests..."
          ./scripts/test-irail-functions.sh
          
          echo "API tests completed"
    
    - script: |
        # Additional Python unit tests if they exist
        if [ -f "tests/test_functions.py" ]; then
          echo "Running unit tests..."
          python -m pytest tests/ -v
        else
          echo "No unit tests found, skipping..."
        fi
      displayName: 'Run Unit Tests'
      env:
        FUNCTION_BASE_URL: 'https://$(AZURE_FUNCTION_APP_NAME).azurewebsites.net'

- stage: DataFactoryValidation
  displayName: 'Validate Data Factory Pipeline'
  dependsOn: Tests
  condition: succeeded()
  
  jobs:
  - job: DataFactoryTests
    displayName: 'Test Data Factory Components'
    pool:
      vmImage: 'ubuntu-latest'
    
    variables:
    - group: azure-secrets
    - group: function-config
    
    steps:
    - checkout: self
    
    - task: AzureCLI@2
      displayName: 'Validate Data Factory Pipeline'
      inputs:
        azureSubscription: 'azure-service-connection'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          # Set variables
          RESOURCE_GROUP="$(AZURE_RESOURCE_GROUP)"
          DATA_FACTORY_NAME="$(AZURE_DATA_FACTORY_NAME)"
          TRIGGER_NAME="trigger_irail_collection_every_5min"
          PIPELINE_NAME="pipeline_irail_train_data_collection"
          
          echo "Checking Data Factory status..."
          
          # Check if Data Factory exists
          if az datafactory show --resource-group "$RESOURCE_GROUP" --name "$DATA_FACTORY_NAME" > /dev/null 2>&1; then
            echo "Data Factory found: $DATA_FACTORY_NAME"
            
            # Check trigger status
            TRIGGER_STATUS=$(az datafactory trigger show \
              --resource-group "$RESOURCE_GROUP" \
              --factory-name "$DATA_FACTORY_NAME" \
              --name "$TRIGGER_NAME" \
              --query "properties.runtimeState" \
              -o tsv 2>/dev/null || echo "NOT_FOUND")
            
            echo "Trigger status: $TRIGGER_STATUS"
            
            # Start trigger if stopped
            if [ "$TRIGGER_STATUS" = "Stopped" ]; then
              echo "Starting Data Factory trigger..."
              az datafactory trigger start \
                --resource-group "$RESOURCE_GROUP" \
                --factory-name "$DATA_FACTORY_NAME" \
                --name "$TRIGGER_NAME"
              echo "Trigger started successfully"
            elif [ "$TRIGGER_STATUS" = "Started" ]; then
              echo "Trigger is already running"
            else
              echo "Warning: Trigger status unknown or not found"
            fi
            
            # Test pipeline run
            echo "Testing pipeline execution..."
            RUN_ID=$(az datafactory pipeline create-run \
              --resource-group "$RESOURCE_GROUP" \
              --factory-name "$DATA_FACTORY_NAME" \
              --name "$PIPELINE_NAME" \
              --query "runId" -o tsv)
            
            echo "Pipeline run initiated with ID: $RUN_ID"
            
          else
            echo "Warning: Data Factory not found, skipping validation"
          fi

- stage: Monitoring
  displayName: 'Setup Monitoring and Alerts'
  dependsOn: DataFactoryValidation
  condition: succeeded()
  
  jobs:
  - job: SetupMonitoring
    displayName: 'Configure Application Insights and Alerts'
    pool:
      vmImage: 'ubuntu-latest'
    
    variables:
    - group: azure-secrets
    - group: function-config
    
    steps:
    - checkout: self
    
    - task: AzureCLI@2
      displayName: 'Setup Application Insights Alerts'
      inputs:
        azureSubscription: 'azure-service-connection'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          RESOURCE_GROUP="$(AZURE_RESOURCE_GROUP)"
          FUNCTION_APP_NAME="$(AZURE_FUNCTION_APP_NAME)"
          APP_INSIGHTS_NAME="$(AZURE_APP_INSIGHTS_NAME)"
          
          echo "Setting up monitoring for Function App: $FUNCTION_APP_NAME"
          
          # Create alert rules for Function App health
          az monitor metrics alert create \
            --name "FunctionApp-HighErrorRate" \
            --resource-group "$RESOURCE_GROUP" \
            --scopes "/subscriptions/$(AZURE_SUBSCRIPTION_ID)/resourceGroups/$RESOURCE_GROUP/providers/Microsoft.Web/sites/$FUNCTION_APP_NAME" \
            --condition "count 'FunctionExecutionCount' > 10" \
            --description "Alert when function error rate is high" \
            --evaluation-frequency 5m \
            --window-size 15m \
            --severity 2 || echo "Alert rule might already exist"
          
          # Create alert for Data Factory failures
          az monitor metrics alert create \
            --name "DataFactory-PipelineFailures" \
            --resource-group "$RESOURCE_GROUP" \
            --scopes "/subscriptions/$(AZURE_SUBSCRIPTION_ID)/resourceGroups/$RESOURCE_GROUP/providers/Microsoft.DataFactory/factories/$(AZURE_DATA_FACTORY_NAME)" \
            --condition "count 'PipelineFailedRuns' > 0" \
            --description "Alert when Data Factory pipeline fails" \
            --evaluation-frequency 5m \
            --window-size 30m \
            --severity 1 || echo "Alert rule might already exist"
          
          echo "Monitoring setup completed"
    
    - task: AzureCLI@2
      displayName: 'Validate End-to-End System'
      inputs:
        azureSubscription: 'azure-service-connection'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          echo "Running final end-to-end validation..."
          
          # Test Function App endpoints
          FUNCTION_URL="https://$(AZURE_FUNCTION_APP_NAME).azurewebsites.net"
          
          # Health check
          if curl -f -s "$FUNCTION_URL/api/health" > /dev/null; then
            echo "PASS: Health endpoint responsive"
          else
            echo "FAIL: Health endpoint not responsive"
            exit 1
          fi
          
          # API endpoints check
          if curl -f -s "$FUNCTION_URL/api/stations" > /dev/null; then
            echo "PASS: Stations API responsive"
          else
            echo "FAIL: Stations API not responsive"
            exit 1
          fi
          
          # Database connectivity check
          if curl -f -s "$FUNCTION_URL/api/analytics" | grep -q "status"; then
            echo "PASS: Database connectivity verified"
          else
            echo "WARN: Database connectivity could not be verified"
          fi
          
          echo "End-to-end validation completed successfully"
          echo "CI/CD Pipeline execution finished"
