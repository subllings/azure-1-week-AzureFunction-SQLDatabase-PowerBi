name: 'Azure Train Data Pipeline - CI/CD'

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main

env:
  TERRAFORM_VERSION: '1.8.0'
  PYTHON_VERSION: '3.10'
  AZURE_FUNCTIONAPP_PACKAGE_PATH: './src'

permissions:
  contents: read
  id-token: write
  pull-requests: write

jobs:
  # Job 1: Code Quality and Testing
  code-quality:
    name: 'Code Quality & Testing'
    runs-on: ubuntu-latest
    
    steps:
    - name: 'Checkout Repository'
      uses: actions/checkout@v4
    
    - name: 'Setup Python'
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: 'Install Python Dependencies'
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest flake8 black isort
    
    - name: 'Code Formatting Check (Black)'
      run: black --check --diff src/
    
    - name: 'Import Sorting Check (isort)'
      run: isort --check-only --diff src/
    
    - name: 'Linting (Flake8)'
      run: flake8 src/ --max-line-length=88 --extend-ignore=E203,W503
    
    - name: 'Run Unit Tests'
      run: pytest tests/ -v --tb=short
      env:
        PYTHONPATH: ${{ github.workspace }}/src

  # Job 2: Security Scanning
  security-scan:
    name: 'Security Scanning'
    runs-on: ubuntu-latest
    
    steps:
    - name: 'Checkout Repository'
      uses: actions/checkout@v4
    
    - name: 'Run Trivy vulnerability scanner'
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: 'Upload Trivy scan results to GitHub Security tab'
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Job 3: Terraform Plan
  terraform-plan:
    name: 'Terraform Plan'
    runs-on: ubuntu-latest
    needs: [code-quality]
    environment: 
      name: ${{ github.ref == 'refs/heads/main' && 'production' || 'development' }}
    
    defaults:
      run:
        working-directory: ./infrastructure
    
    outputs:
      tfplanExitCode: ${{ steps.tf-plan.outputs.exitcode }}
    
    steps:
    - name: 'Checkout Repository'
      uses: actions/checkout@v4
    
    - name: 'Azure Login'
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
    
    - name: 'Setup Terraform'
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}
    
    - name: 'Get Current IP Address'
      id: get-ip
      run: echo "ip=$(curl -s https://ipinfo.io/ip)" >> $GITHUB_OUTPUT
    
    - name: 'Terraform Init'
      run: |
        terraform init \
          -backend-config="resource_group_name=${{ secrets.TFSTATE_RESOURCE_GROUP }}" \
          -backend-config="storage_account_name=${{ secrets.TFSTATE_STORAGE_ACCOUNT }}" \
          -backend-config="container_name=tfstate" \
          -backend-config="key=train-data-pipeline-${{ github.ref == 'refs/heads/main' && 'prod' || 'dev' }}.tfstate"
    
    - name: 'Terraform Format Check'
      run: terraform fmt -check
    
    - name: 'Terraform Validate'
      run: terraform validate
    
    - name: 'Terraform Plan'
      id: tf-plan
      run: |
        export exitcode=0
        terraform plan -detailed-exitcode -no-color -out tfplan \
          -var="environment=${{ github.ref == 'refs/heads/main' && 'prod' || 'dev' }}" \
          -var="sql_admin_password=${{ secrets.SQL_ADMIN_PASSWORD }}" \
          -var="developer_ip=${{ steps.get-ip.outputs.ip }}" \
          || export exitcode=$?
        
        echo "exitcode=$exitcode" >> $GITHUB_OUTPUT
        
        if [ $exitcode -eq 1 ]; then
          echo Terraform Plan Failed!
          exit 1
        else
          exit 0
        fi
    
    - name: 'Publish Terraform Plan'
      uses: actions/upload-artifact@v3
      with:
        name: tfplan
        path: ./infrastructure/tfplan
    
    - name: 'Create String Output'
      id: tf-plan-string
      run: |
        TERRAFORM_PLAN=$(terraform show -no-color tfplan)
        
        delimiter="$(openssl rand -hex 8)"
        echo "summary<<${delimiter}" >> $GITHUB_OUTPUT
        echo "## Terraform Plan Output" >> $GITHUB_OUTPUT
        echo "<details><summary>Click to expand</summary>" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo '```terraform' >> $GITHUB_OUTPUT
        echo "$TERRAFORM_PLAN" >> $GITHUB_OUTPUT
        echo '```' >> $GITHUB_OUTPUT
        echo "</details>" >> $GITHUB_OUTPUT
        echo "${delimiter}" >> $GITHUB_OUTPUT
    
    - name: 'Publish Terraform Plan to Task Summary'
      env:
        SUMMARY: ${{ steps.tf-plan-string.outputs.summary }}
      run: |
        echo "$SUMMARY" >> $GITHUB_STEP_SUMMARY
    
    - name: 'Comment Terraform Plan on PR'
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      env:
        SUMMARY: "${{ steps.tf-plan-string.outputs.summary }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const body = `${process.env.SUMMARY}`;
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: body
          })

  # Job 4: Terraform Apply (only on main branch)
  terraform-apply:
    name: 'Terraform Apply'
    if: github.ref == 'refs/heads/main' && needs.terraform-plan.outputs.tfplanExitCode == 2
    runs-on: ubuntu-latest
    environment: production
    needs: [terraform-plan, security-scan]
    
    defaults:
      run:
        working-directory: ./infrastructure
    
    steps:
    - name: 'Checkout Repository'
      uses: actions/checkout@v4
    
    - name: 'Azure Login'
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
    
    - name: 'Setup Terraform'
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}
    
    - name: 'Download Terraform Plan'
      uses: actions/download-artifact@v3
      with:
        name: tfplan
        path: ./infrastructure
    
    - name: 'Terraform Init'
      run: |
        terraform init \
          -backend-config="resource_group_name=${{ secrets.TFSTATE_RESOURCE_GROUP }}" \
          -backend-config="storage_account_name=${{ secrets.TFSTATE_STORAGE_ACCOUNT }}" \
          -backend-config="container_name=tfstate" \
          -backend-config="key=train-data-pipeline-prod.tfstate"
    
    - name: 'Terraform Apply'
      run: terraform apply -auto-approve tfplan
    
    - name: 'Get Terraform Outputs'
      id: tf-outputs
      run: |
        echo "function_app_name=$(terraform output -raw function_app_name)" >> $GITHUB_OUTPUT
        echo "resource_group_name=$(terraform output -raw resource_group_name)" >> $GITHUB_OUTPUT
        echo "container_registry_name=$(terraform output -raw container_registry_name)" >> $GITHUB_OUTPUT
        echo "container_registry_server=$(terraform output -raw container_registry_login_server)" >> $GITHUB_OUTPUT

  # Job 5: Build and Deploy Function App
  deploy-function:
    name: 'Deploy Function App'
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: [terraform-apply]
    environment: production
    
    steps:
    - name: 'Checkout Repository'
      uses: actions/checkout@v4
    
    - name: 'Setup Python'
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: 'Create and start virtual environment'
      run: |
        python -m venv venv
        source venv/bin/activate
        
    - name: 'Install dependencies'
      run: |
        source venv/bin/activate
        pip install -r requirements.txt
        
    - name: 'Azure Login'
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
    
    - name: 'Deploy to Azure Functions'
      uses: Azure/functions-action@v1
      with:
        app-name: ${{ needs.terraform-apply.outputs.function_app_name }}
        package: ${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}
        publish-profile: ${{ secrets.AZURE_FUNCTIONAPP_PUBLISH_PROFILE }}

  # Job 6: Build and Push Docker Image (Optional - for containerized deployment)
  build-and-push-image:
    name: 'Build and Push Docker Image'
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: [terraform-apply]
    environment: production
    
    steps:
    - name: 'Checkout Repository'
      uses: actions/checkout@v4
    
    - name: 'Azure Login'
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
    
    - name: 'Login to Azure Container Registry'
      run: |
        az acr login --name ${{ needs.terraform-apply.outputs.container_registry_name }}
    
    - name: 'Build and Push Docker Image'
      run: |
        docker build -t ${{ needs.terraform-apply.outputs.container_registry_server }}/train-data-function:${{ github.sha }} .
        docker push ${{ needs.terraform-apply.outputs.container_registry_server }}/train-data-function:${{ github.sha }}
        
        # Also push as latest
        docker tag ${{ needs.terraform-apply.outputs.container_registry_server }}/train-data-function:${{ github.sha }} ${{ needs.terraform-apply.outputs.container_registry_server }}/train-data-function:latest
        docker push ${{ needs.terraform-apply.outputs.container_registry_server }}/train-data-function:latest

  # Job 7: Integration Tests
  integration-tests:
    name: 'Integration Tests'
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: [deploy-function]
    environment: production
    
    steps:
    - name: 'Checkout Repository'
      uses: actions/checkout@v4
    
    - name: 'Setup Python'
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: 'Install Test Dependencies'
      run: |
        pip install pytest requests
    
    - name: 'Run Integration Tests'
      run: |
        pytest tests/integration/ -v
      env:
        FUNCTION_APP_URL: ${{ needs.terraform-apply.outputs.function_app_url }}
        AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
