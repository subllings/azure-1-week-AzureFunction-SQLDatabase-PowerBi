# Azure DevOps Pipeline - Demo Version (Self-hosted Agent)
# Simplified CI/CD Pipeline for Azure Functions using self-hosted agent

trigger:
- main

resources:
- repo: self

variables:
  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: 'criraildevi6lr9a-connection'
  imageRepository: 'traindata-function'
  containerRegistry: 'criraildevi6lr9a.azurecr.io'
  dockerfilePath: '$(Build.SourcesDirectory)/Dockerfile'
  tag: '$(Build.BuildId)'

stages:
- stage: Build
  displayName: Build and push stage
  jobs:
  - job: Build
    displayName: Build
    pool:
      name: 'Default'  # Use self-hosted agent pool
    steps:
    - checkout: self
    
    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)
          latest

- stage: Deploy
  displayName: Deploy to Function App
  dependsOn: Build
  condition: succeeded()
  jobs:
  - deployment: DeployToStaging
    displayName: Deploy to Azure Function App
    pool:
      name: 'Default'  # Use self-hosted agent pool
    environment: 'staging'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureCLI@2
            displayName: Configure Function App container
            inputs:
              azureSubscription: 'azure-service-connection'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                set -e
                IMAGE="$(containerRegistry)/$(imageRepository):$(tag)"
                echo "Setting container image to ${IMAGE}"
                az functionapp config container set \
                  --name $(FUNCTION_APP_NAME) \
                  --resource-group $(RESOURCE_GROUP_NAME) \
                  --docker-custom-image-name "${IMAGE}" \
                  --docker-registry-server-url "https://$(containerRegistry)" \
                  --docker-registry-server-user "$(ACR_USERNAME)" \
                  --docker-registry-server-password "$(ACR_PASSWORD)"
                  
          - task: AzureCLI@2
            displayName: Restart Function App
            inputs:
              azureSubscription: 'azure-service-connection'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                az functionapp restart --name $(FUNCTION_APP_NAME) --resource-group $(RESOURCE_GROUP_NAME)
                echo "Function App restarted successfully"
